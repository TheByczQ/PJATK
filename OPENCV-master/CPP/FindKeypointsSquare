#pragma comment(linker, "/STACK:10000000")
#pragma comment(linker, "/HEAP:10000000")
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <fstream>

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{
	//----Startowe zakresy RGB do wyszukania maski koloru---//
	int lowerR = 245;
	int lowerG = 86;
	int lowerB = 93;
	int upperR = 255;
	int upperG = 255;
	int upperB = 255;

	int circleR = 124;
	int circleG = 252;
	int circleB = 0;

	//----Stworzenie okna, by móc zmieniać zakresy na bieżąco podczas trwania programu----//
	namedWindow("Trackbar", WINDOW_FULLSCREEN);
	createTrackbar("Lower R", "Trackbar", &lowerR, 255, NULL);
	createTrackbar("Lower G", "Trackbar", &lowerG, 255, NULL);
	createTrackbar("Lower B", "Trackbar", &lowerB, 255, NULL);
	createTrackbar("Upper R", "Trackbar", &upperR, 255, NULL);
	createTrackbar("Upper G", "Trackbar", &upperG, 255, NULL);
	createTrackbar("Upper B", "Trackbar", &upperB, 255, NULL);

	//----Zmeinne główne----//
	Mat frame, frame2;
	Mat hsv;
	Mat drone;
	VideoCapture video("Dron Cal 12.55260362.20190821144706.avi"); // wgranie wideo
	video.set(CAP_PROP_FPS, 60.0f);
	Mat lower_orange(217.0f, 97.0f, 54.0f);
	Mat upper_orange(255.05f, 103.0f, 38.0f);
	Mat mask;
	Mat erodeElement = getStructuringElement(MORPH_RECT, Size(3, 3));	//elementy struktutalne potrzbne do funkcji erode i dilate
	Mat dilateElement = getStructuringElement(MORPH_RECT, Size(8, 8));	//
	vector< vector<Point> > contours;
	vector< vector<Point> > temp;
	vector< vector<Point> > temp_contours;
	int temp_x, temp_y;
	vector<Vec4i> hierarchy;
	Mat croppedImage, edges;
	Rect objectBoundingRectangle = Rect(0, 0, 0, 0);
	bool objectFound = false;
	int iter = 0;
	int theObject[2] = { 0, 0 };
	vector <KeyPoint> kp;
	vector<vector<DMatch>> matches;
	Mat outi, outi_r, descriptor_l, descriptor_r;
	Ptr<ORB> orb = ORB::create();

	//----Pętla główna----//
	while (1)
	{
		video.read(frame);
		if (frame.empty())
			break;

		//----Pierwsza klatka filmu----//
		if (iter == 0) {
			cvtColor(frame, hsv, COLOR_RGB2HSV);												//
			inRange(hsv, Scalar(lowerB, lowerG, lowerR), Scalar(upperB, upperG, upperR), mask);	//
			erode(mask, mask, erodeElement);													// Stworzenie maski koloru		
			erode(mask, mask, erodeElement);													//
			dilate(mask, mask, dilateElement);													//			
			dilate(mask, mask, dilateElement);													//

			findContours(mask, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
			cv::bitwise_and(frame, frame, drone, mask);
			if (contours.empty());

			//----Zmniejszenie obszaru poszukiwań----//
			else {
				croppedImage = frame(Rect(contours.at(0).at(0).x - 50, contours.at(0).at(0).y - 50, 200, 100));
				temp_contours = contours;
			}
			std::cout << contours.at(0).at(0).y << endl;
			std::cout << "calosc: " << frame.size() << endl;


			iter++;
		}
		//----Kolejne klatki filmu----//
		else {

			cvtColor(croppedImage, hsv, COLOR_RGB2HSV);											//
			inRange(hsv, Scalar(lowerB, lowerG, lowerR), Scalar(upperB, upperG, upperR), mask);	//
			erode(mask, mask, erodeElement);													// Stworzenie maski koloru dla mniejszego obszaru poszukiwań
			erode(mask, mask, erodeElement);													//
			dilate(mask, mask, dilateElement);													//
			dilate(mask, mask, dilateElement);													//

			findContours(mask, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
			cv::bitwise_and(croppedImage, croppedImage, drone, mask);

			orb->detectAndCompute(croppedImage, noArray(), kp, descriptor_l);
			drawKeypoints(croppedImage, kp, outi);
			cv::imshow("kp", outi);

			//----Jeżeli wybrany obszar nie zwraca wyników, rozszerzenie obszaru poszukiwań----// 
			if (contours.empty()) {
				cvtColor(frame, hsv, COLOR_RGB2HSV);
				inRange(hsv, Scalar(lowerB, lowerG, lowerR), Scalar(upperB, upperG, upperR), mask);
				erode(mask, mask, erodeElement);
				erode(mask, mask, erodeElement);
				dilate(mask, mask, dilateElement);
				dilate(mask, mask, dilateElement);

				findContours(mask, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
				cv::bitwise_and(frame, frame, drone, mask);

				if (contours.empty());
				//----Zmniejszenie obszaru poszukiwań----//
				else {
					croppedImage = frame(Rect(contours.at(0).at(0).x - 50, contours.at(0).at(0).y - 25, 200, 100));
					temp_contours = contours;
					std::cout << contours.at(0).at(0).x << endl;
					if (!temp.empty())
						temp.clear();
				}
			}
			else {
				if (temp.empty())
					temp = contours;
				//----Przewidywanie ruchu drona oraz obszaru poszukiwań----//
				else {
					temp_x = contours.at(0).at(0).x - temp.at(0).at(0).x;
					temp_y = contours.at(0).at(0).y - temp.at(0).at(0).y;
					croppedImage = frame(Rect(temp_contours.at(0).at(0).x + temp_x - 50, temp_contours.at(0).at(0).y + temp_y - 25, 200, 100));
					temp_contours.at(0).at(0).x = temp_contours.at(0).at(0).x + temp_x;
					temp_contours.at(0).at(0).y = temp_contours.at(0).at(0).y + temp_y;
				}
			}
		}
		if (contours.empty())
		{
			;
		}
		//----obrysowanie znalezionych piłeczek----//
		else
		{
			switch (contours.size())
			{
			case 1:
				circle(croppedImage, Point(contours.at(0).at(0).x + 5, contours.at(0).at(0).y + 5), 5, Scalar(circleR, circleG, circleB), 2);
			case 2:
				circle(croppedImage, Point(contours.at(0).at(0).x + 5, contours.at(0).at(0).y + 5), 5, Scalar(circleR, circleG, circleB), 2);
				circle(croppedImage, Point(contours.back().at(0).x + 5, contours.back().at(0).y + 5), 5, Scalar(circleR, circleG, circleB), 2);
			}
		}

		//----Wyświetlanie wyniki na pojedynczych klatkach + mapy konturów----//
		Canny(drone, edges, 150, 200);
		//imshow("disp", croppedImage);
		//imshow("frame", frame);
		//imshow("map", edges);
		contours.clear();
		iter++;
		char c = char(waitKey(1));
		if (c == 27)
			break;




	}

	waitKey(1); // Opóźnienie, żeby wyświetlić okno
	return 0;
}
